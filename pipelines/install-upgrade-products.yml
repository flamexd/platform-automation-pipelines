---
#┌───────────────────────────────────────────────────────────────────┐
#├ Groups for Organizing Concourse                                   │
#│                                                                   │
#├ All:                                                              │
#│ └── Contains entire job workflow within pipeline                  │
#├ PAS                                                               │
#│ └── Job workflow for Pivotal Application Service                  │
#├ Credhub-SB                                                        │
#│ └── Job workflow for Credhub Service Broker                       │
#├ MySQL                                                             │
#│ └── Job workflow for MySQL for Pivotal                            │
#├ PCS                                                               │
#│ └── Job workflow for p-compliance-scanner for Pivotal             │
#├ Apply-Changes                                                     │
#│ └── Job workflow to apply changes and export the installation     │
#└───────────────────────────────────────────────────────────────────┘
groups:
- name: All
  jobs:
  - upload-stage-product-pas
  - configure-product-pas
  - upload-stage-product-csb
  - configure-product-csb
  - upload-stage-product-mysql
  - configure-product-mysql
  - upload-stage-product-lanozzle
  - configure-product-lanozzle
  - upload-stage-product-pcs
  - configure-product-pcs
  - apply-product-changes
  - export-installation
- name: PAS
  jobs:
  - upload-stage-product-pas
  - configure-product-pas
- name: Compliance Scanner
  jobs:
  - upload-stage-product-pcs
  - configure-product-pcs
- name: Credhub-SB
  jobs:
  - upload-stage-product-csb
  - configure-product-csb
- name: MySQL
  jobs:
  - upload-stage-product-mysql
  - configure-product-mysql
- name: Log Analytics
  jobs:
  - upload-stage-product-lanozzle
  - configure-product-lanozzle
- name: Apply-Changes
  jobs:
  - apply-product-changes
  - export-installation

#┌───────────────────────────────────────────────────────────────────┐
#├ Reusable anchors                                                  │
#│                                                                   │
#├ deploy-storage-params:                                            │
#│ └── Params for Azure Storage for products to deploy               │
#├ install-storage-params:                                           │
#│ └── Params for Azure Storage for installation*.zip location       │
#├ credhub-interpolate                                               │
#│ └── Common configuration file interpolation                       │
#└───────────────────────────────────────────────────────────────────┘

deploy-storage-params: &deploy-storage-params
  storage_account_name: ((azure_storage_accounts.deploy.username))
  storage_account_key: ((azure_storage_accounts.deploy.password))
  container: product
  base_url: ((azure_storage_accounts.base_url))

install-storage-params: &install-storage-params
  storage_account_name: ((azure_storage_accounts.state.username))
  storage_account_key: ((azure_storage_accounts.state.password))
  container: opsmgr
  base_url: ((azure_storage_accounts.base_url))

credhub-interpolate: &credhub-interpolate
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATHS: ((credhub.interpolate_folders))
  input_mapping:
    files: platform-automation-pipelines
  image: platform-automation-image

#┌───────────────────────────────────────────────────────────────────┐
#├ Resource Types not included with Concourse                        │
#│                                                                   │
#├ azure-blobstore:                                                  │
#│ ├── Necessary to access the Azure Blobstore containers and its    │
#│ └── container image is stored in a private docker registry.       │
#└───────────────────────────────────────────────────────────────────┘
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    username: admin
    password: ((harbor_password))
    client_certs:
    - domain: ((harbor_uri))
      cert: |
        ((control-plane-ssl-cert))
      key: |
        ((control-plane-ssl-key))
    ca_certs:
    - domain: ((harbor_uri))
      cert: |
        ((control-plane-ca-cert))
    repository: ((harbor_uri))/azure/azure-blobstore-resource
    tag: latest

#┌───────────────────────────────────────────────────────────────────┐
#├ Resources for Product Jobs                                        │
#│                                                                   │
#├ git:                                                              │
#│ └── Configuration for OpsMan Automation                           │
#├ azure-blobstore:                                                  │
#│ ├── Platform Automation Tasks used in pipeline jobs/tasks         │
#│ ├── Platform Automation Image used by most tasks                  │
#│ ├── Installation storage                                          │
#│ ├── PAS product (.pivotal)                                        │
#│ ├── PAS stemcell (.tgz)                                           │
#│ ├── Credhub Service Broker product (.pivotal)                     │
#│ ├── Credhub Service Broker stemcell (.tgz)                        │
#│ ├── MySQL product (.pivotal)                                      │
#│ ├── MySQL stemcell (.tgz)                                         │
#│ ├── Log Analytics Nozzle product (.pivotal)                       │
#│ └── Log Analytics nozzle stemcell (.tgz)                          │
#│ ├── PCS product (.pivotal)                                        │
#│ └── PCS stemcell (.tgz)                                           │
#└───────────────────────────────────────────────────────────────────┘
resources:
# GIT REPO
- name: platform-automation-pipelines
  type: git
  source:
    branch: ((git.configuration.branch))
    private_key: ((git_user.private_key))
    uri: ((git.configuration.uri))

# PLATFORM AUTOMATION
- name: platform-automation-tasks
  type: azure-blobstore
  source:
    regexp: .*tasks-(.*).zip
    <<: *deploy-storage-params

- name: platform-automation-image
  type: azure-blobstore
  source:
    regexp: .*image-(.*).tgz
    <<: *deploy-storage-params

# INSTALLATION BACKUP FILES
- name: installation
  type: azure-blobstore
  source:
    regexp: installation-(.*).zip
    <<: *install-storage-params

# PAS
- name: pas-product
  type: azure-blobstore
  source:
    regexp: ((products.pas.product-regex))
    <<: *deploy-storage-params

- name: pas-stemcell
  type: azure-blobstore
  source:
    regexp: ((products.pas.stemcell-regex))
    <<: *deploy-storage-params

# CREDHUB SERVICE BROKER
- name: credhubsb-product
  type: azure-blobstore
  source:
    regexp: ((products.credhubsb.product-regex))
    <<: *deploy-storage-params

- name: credhubsb-stemcell
  type: azure-blobstore
  source:
    regexp: ((products.credhubsb.stemcell-regex))
    <<: *deploy-storage-params

# MYSQL
- name: mysql-product
  type: azure-blobstore
  source:
    regexp: ((products.mysql.product-regex))
    <<: *deploy-storage-params

- name: mysql-stemcell
  type: azure-blobstore
  source:
    regexp: ((products.mysql.stemcell-regex))
    <<: *deploy-storage-params

# LOG ANALYTICS NOZZLE
- name: lanozzle-product
  type: azure-blobstore
  source:
    regexp: ((products.lanozzle.product-regex))
    <<: *deploy-storage-params

- name: lanozzle-stemcell
  type: azure-blobstore
  source:
    regexp: ((products.lanozzle.stemcell-regex))
    <<: *deploy-storage-params

# PCS
- name: pcs-product
  type: azure-blobstore
  source:
    regexp: ((products.pcs.product-regex))
    <<: *storage-params

- name: pcs-stemcell
  type: azure-blobstore
  source:
    regexp: ((products.pcs.stemcell-regex))
    <<: *storage-params

#┌───────────────────────────────────────────────────────────────────┐
#├ Jobs for Product Installation Workflow                            │
#│                                                                   │
#├ Update and Stage Product PAS                                      │
#│ ├── Generate (interpolate) environment files                      │
#│ ├── Upload the product                                            │
#│ ├── Stage the product                                             │
#│ └── Upload the stemcell                                           │
#├ Configure the Product PAS:                                        │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Configure the product                                         │
#│                                                                   │
#├ Update and Stage Product Credhub Service Broker                   │
#│ ├── Generate (interpolate) environment files                      │
#│ ├── Upload the product                                            │
#│ ├── Stage the product                                             │
#│ └── Upload the stemcell                                           │
#├ Configure the Product Credhub Service Broker:                     │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Configure the product                                         │
#│                                                                   │
#├ Update and Stage Product MySQL for Pivotal                        │
#│ ├── Generate (interpolate) environment files                      │
#│ ├── Upload the product                                            │
#│ ├── Stage the product                                             │
#│ └── Upload the stemcell                                           │
#├ Configure the Product MySQL for Pivotal:                          │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Configure the product                                         │
#│                                                                   │
#├ Update and Stage Product Log Analytics Nozzle for Pivotal         │
#│ ├── Generate (interpolate) environment files                      │
#│ ├── Upload the product                                            │
#│ ├── Stage the product                                             │
#│ └── Upload the stemcell                                           │
#│                                                                   │
#├ Update and Stage Product PCS (p-compliance-scanner                │
#│ ├── Generate (interpolate) environment files                      │
#│ ├── Upload the product                                            │
#│ ├── Stage the product                                             │
#│ └── Upload the stemcell                                           │
#│                                                                   │
#├ Configure the Product Log Analytics Nozzle for Pivotal:           │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Configure the product                                         │
#│                                                                   │
#├ Configure the Product PCS (p-compliance-scanner)                  │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Configure the product                                         │
#│                                                                   │
#├ Apply Product Changes:                                            │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Apply changes for all products                                │
#├ Export the Installation                                           │
#│ ├── Generate (interpolate) environment files                      │
#│ └── Export the installation file, store in Azure Blobstore        │
#└───────────────────────────────────────────────────────────────────┘
jobs:

# PAS
- name: upload-stage-product-pas
  serial: true
  plan:
  - aggregate:
    - get: pas-product
      trigger: true
    - get: pas-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    file: platform-automation-tasks/tasks/upload-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: pas-product
    image: platform-automation-image

  - task: stage-product
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: pas-product
    image: platform-automation-image

  - task: upload-stemcell
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      stemcell: pas-stemcell
    image: platform-automation-image

- name: configure-product-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ upload-stage-product-pas ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-product
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: foundation/((foundation))/products/elastic-runtime.yml
      ENV_FILE: foundation/((foundation))/env/env.yml
      VARS_FILES: vars/foundation/((foundation))/vars/elastic-runtime-vars.yml
    input_mapping:
      config: platform-automation-pipelines
      env: interpolated-files
      vars: interpolated-files
    image: platform-automation-image

# CREDHUB SERVICE BROKER
- name: upload-stage-product-csb
  serial: true
  plan:
  - aggregate:
    - get: credhubsb-product
    - get: credhubsb-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ configure-product-pas ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    file: platform-automation-tasks/tasks/upload-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: credhubsb-product
    image: platform-automation-image

  - task: stage-product
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: credhubsb-product
    image: platform-automation-image

  - task: upload-stemcell
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      stemcell: credhubsb-stemcell
    image: platform-automation-image

- name: configure-product-csb
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ upload-stage-product-csb ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-product
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: foundation/((foundation))/products/credhub-service-broker.yml
      ENV_FILE: foundation/((foundation))/env/env.yml
      VARS_FILES: vars/foundation/((foundation))/vars/credhub-service-broker-vars.yml
    input_mapping:
      config: platform-automation-pipelines
      env: interpolated-files
      vars: interpolated-files
    image: platform-automation-image

# MYSQL
- name: upload-stage-product-mysql
  serial: true
  plan:
  - aggregate:
    - get: mysql-product
    - get: mysql-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ configure-product-csb ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    file: platform-automation-tasks/tasks/upload-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: mysql-product
    image: platform-automation-image

  - task: stage-product
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: mysql-product
    image: platform-automation-image

  - task: upload-stemcell
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      stemcell: mysql-stemcell
    image: platform-automation-image

- name: configure-product-mysql
  serial: true
  plan:
  - aggregate:
    - get: mysql-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ upload-stage-product-mysql ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-product
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: foundation/((foundation))/products/pivotal-mysql.yml
      ENV_FILE: foundation/((foundation))/env/env.yml
      VARS_FILES: vars/foundation/((foundation))/vars/pivotal-mysql-vars.yml
    input_mapping:
      config: platform-automation-pipelines
      env: interpolated-files
      vars: interpolated-files
    image: platform-automation-image

# Log Analytics Nozzle
- name: upload-stage-product-lanozzle
  serial: true
  plan:
  - aggregate:
    - get: lanozzle-product
    - get: lanozzle-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ configure-product-mysql ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    file: platform-automation-tasks/tasks/upload-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: lanozzle-product
    image: platform-automation-image

  - task: stage-product
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      product: lanozzle-product
    image: platform-automation-image

  - task: upload-stemcell
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
      stemcell: lanozzle-stemcell
    image: platform-automation-image

- name: configure-product-lanozzle
  serial: true
  plan:
  - aggregate:
    - get: lanozzle-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ upload-stage-product-lanozzle ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-product
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: foundation/((foundation))/products/azure-log-analytics-nozzle.yml
      ENV_FILE: foundation/((foundation))/env/env.yml
      VARS_FILES: vars/foundation/((foundation))/vars/azure-log-analytics-nozzle-vars.yml
    input_mapping:
      config: platform-automation-pipelines
      env: interpolated-files
      vars: interpolated-files
    image: platform-automation-image

# Pivotal Compliance Scanner
- name: upload-stage-product-pcs
  serial: true
  plan:
  - aggregate:
    - get: pcs-product
    - get: pcs-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    file: platform-automation-tasks/tasks/upload-product.yml
    params:
      ENV_FILE: foundation/sbx/env/env.yml
    input_mapping:
      env: interpolated-files
      product: pcs-product
    image: platform-automation-image

  - task: stage-product
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: foundation/sbx/env/env.yml
    input_mapping:
      env: interpolated-files
      product: pcs-product
    image: platform-automation-image

  - task: upload-stemcell
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    params:
      ENV_FILE: foundation/sbx/env/env.yml
    input_mapping:
      env: interpolated-files
      stemcell: pcs-stemcell
    image: platform-automation-image

- name: configure-product-pcs
  serial: true
  plan:
  - aggregate:
    - get: pcs-stemcell
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ upload-stage-product-pcs ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-product
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: foundation/sbx/products/pivotal-pcs.yml
      ENV_FILE: foundation/sbx/env/env.yml
      VARS_FILES: vars/foundation/sbx/vars/pivotal-pcs-vars.yml
    input_mapping:
      config: platform-automation-pipelines
      env: interpolated-files
      vars: interpolated-files
    image: platform-automation-image


# APPLY CHANGES
- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ configure-product-lanozzle ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: apply-product-changes
    file: platform-automation-tasks/tasks/apply-changes.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
    image: platform-automation-image

# EXPORT INSTALLATION FILE AND STORE IN AZURE BLOBSTORE
- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [ apply-product-changes ]
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: platform-automation-pipelines
      passed: [ apply-product-changes ]
      trigger: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: export-installation
    file: platform-automation-tasks/tasks/export-installation.yml
    params:
      ENV_FILE: foundation/((foundation))/env/env.yml
    input_mapping:
      env: interpolated-files
    image: platform-automation-image
  - put: installation
    params:
      file: installation/installation-*.zip